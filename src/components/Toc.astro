---
import type { MarkdownHeading } from 'astro'
import { getEntry } from 'astro:content'
import Modal from '@/components/Modal.astro'
import { getLocaleFromUrl } from '@/utils/i18n/getLocaleFromUrl'
import { TOC_MINIMUM_COUNT } from '@/consts'

type Props = {
  headings: MarkdownHeading[]
}

const locale = getLocaleFromUrl(Astro.url)
const t = await getEntry('i18n', `${locale}/translation`)
const { headings } = Astro.props
---

{
  headings.length >= TOC_MINIMUM_COUNT && (
    <Modal
      modalName="toc"
      iconName="toc"
      iconText={t.data.toc.button_label}
      buttonLabel={t.data.toc.button_label}
    >
      <ul id="toc-list">
        {headings.map((heading) => (
          <li class={`depth-${heading.depth}`}>
            <a href={`#${heading.slug}`}>{heading.text.replace('#', '')}</a>
          </li>
        ))}
      </ul>
    </Modal>
  )
}
<style>
  ul#toc-list {
    display: grid;
    gap: 1rem;
    margin-left: 1.25rem;
    li {
      &.depth-2 {
        margin-left: 0;
        &::before {
          content: '◆ ';
        }
      }
      &.depth-3 {
        margin-left: 1.25rem;
        &::before {
          content: '▶ ';
        }
      }
      &.depth-4 {
        margin-left: 2.5rem;
        &::before {
          content: '◇ ';
        }
      }
      &.depth-5 {
        margin-left: 3.75rem;
        &::before {
          content: '▷ ';
        }
      }
      &.depth-6 {
        margin-left: 5rem;
        &::before {
          content: '・ ';
        }
      }
    }
    a {
      color: var(--black);
      text-decoration: none;
      border-bottom: 2px solid transparent;
    }
  }
</style>
<script>
  function init() {
    const listenToModalEvents = (
      modalButton: HTMLButtonElement,
      modal: HTMLDivElement,
      anchorLinks: NodeListOf<HTMLLIElement>
    ) => {
      modalButton.addEventListener('click', () => {
        modal.classList.toggle('hidden')
      })

      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.toggle('hidden')
        }
      })

      anchorLinks.forEach((link) => {
        link.addEventListener('click', () => {
          modal.classList.toggle('hidden')
        })
      })

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          modal.classList.add('hidden')
        }
        if (e.code === 'KeyC' && e.ctrlKey && e.shiftKey) {
          e.preventDefault()
          modal.classList.toggle('hidden')
        }
      })
    }

    const modalButton = document.getElementById(
      'toc-icon-button'
    ) as HTMLButtonElement | null
    const modal = document.getElementById('toc-modal') as HTMLDivElement | null
    const anchorLinks = document.querySelectorAll(
      'ul#toc-list > li'
    ) as NodeListOf<HTMLLIElement>

    if (modalButton && modal) {
      listenToModalEvents(modalButton, modal, anchorLinks)
    }
  }

  const eventsToBeAdded = ['DOMContentLoaded'] as const

  eventsToBeAdded.forEach((evName) => {
    document.addEventListener(evName, init)
  })
</script>
