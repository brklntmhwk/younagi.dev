---
import '@pagefind/default-ui/css/ui.css'
import { getEntry } from 'astro:content'
import Modal from '@/components/Modal.astro'
import { getLocaleFromUrl } from '@/utils/i18n/getLocaleFromUrl'

const locale = getLocaleFromUrl(Astro.url)
const t = await getEntry('i18n', `${locale}/translation`)
---

<Modal
  modalName="search"
  iconName="magnifier"
  buttonLabel={t.data.search.button_label}
  class="search-window"
>
  <div id="search"></div>
</Modal>
<style>
  :global(.search-window) {
    --pagefind-ui-background: var(--bg);
    --pagefind-ui-border: var(--line);
    --pagefind-ui-text: var(--fg);
    --pagefind-ui-primary: var(--fg);
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: 2px;
    --pagefind-ui-font: initial;
    --pagefind-ui-tag: color-mix(in srgb, var(--gray) 95%, var(--fg) 5%);
  }
</style>
<script>
  import { PagefindUI } from '@pagefind/default-ui'

  function init() {
    new PagefindUI({
      element: '#search',
      showImages: false,
    })

    const listenToModalEvents = (
      modalButton: HTMLButtonElement,
      modal: HTMLDivElement,
      input: HTMLInputElement
    ) => {
      modalButton.addEventListener('click', () => {
        modal.classList.toggle('hidden')
        input.focus()
      })

      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.toggle('hidden')
        }
      })

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          modal.classList.add('hidden')
        }
        if (e.code === 'KeyF' && e.ctrlKey && e.shiftKey) {
          e.preventDefault()
          modal.classList.toggle('hidden')
          input.focus()
        }
      })
    }

    const modalButton = document.getElementById(
      'search-icon-button'
    ) as HTMLButtonElement | null
    const modal = document.getElementById(
      'search-modal'
    ) as HTMLDivElement | null
    const input = document.querySelector(
      '.pagefind-ui__search-input'
    ) as HTMLInputElement | null

    if (modalButton && modal && input) {
      listenToModalEvents(modalButton, modal, input)
    }
  }

  const eventsToBeAdded = ['DOMContentLoaded'] as const

  eventsToBeAdded.forEach((evName) => {
    document.addEventListener(evName, init)
  })
</script>
