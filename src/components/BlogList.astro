---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate.astro'
import Svg from '@/components/Svg/index.astro'

type Props = {
  entries: CollectionEntry<'blog'>[]
  kind: 'blog' | 'taxonomy'
}

const { entries, kind } = Astro.props
---

{
  entries.length !== 0 ? (
    <ul class="entry-list">
      {entries.map((entry) => (
        <li>
          <article>
            <section class="date">
              <div>
                <Svg iconName="upload" width={20} height={20} />
                <FormattedDate date={entry.data.publishedAt} />
              </div>
              {entry.data.modifiedAt && (
                <div>
                  <Svg iconName="update" width={20} height={20} />
                  <FormattedDate date={entry.data.modifiedAt} />
                </div>
              )}
            </section>
            <a class="blog-title" href={`/blog/${entry.slug}/`}>
              {entry.data.title}
            </a>
            <span>{entry.data.description}</span>
            {kind === 'blog' && (
              <section class="taxonomies">
                <a href={`/blog/categories/${entry.data.category}/`}>
                  {entry.data.category}
                </a>
                <ul class="tag-list">
                  {entry.data.tags?.map((tag) => (
                    <li>
                      <a href={`/blog/tags/${tag}/`}>#{tag}</a>
                    </li>
                  ))}
                </ul>
              </section>
            )}
          </article>
        </li>
      ))}
    </ul>
  ) : (
    <p>Woops! No entry found..</p>
  )
}
<style>
  a.blog-title {
    font-size: 2rem;
    font-weight: 700;
    line-height: 1.1;
    text-decoration: none;
    &:hover {
      text-decoration: underline;
      text-underline-offset: 7px;
    }
  }
  ul.entry-list {
    display: grid;
    gap: 1.75rem;
    padding: 0;
  }
  ul.entry-list > li {
    list-style: none;
    /* border: 1px solid black; */
  }
  ul.entry-list article {
    display: grid;
    row-gap: 5px;
  }
  ul.tag-list {
    display: flex;
    flex-wrap: wrap;
    column-gap: 0.4rem;
    padding: 0;
  }
  ul.tag-list > li {
    list-style: none;
  }
  article {
    position: relative;
    border-top: 4px solid #000000;
    border-right: 2px solid #000000;
    border-bottom: 2px solid #000000;
    border-left: 2px solid #000000;
    border-radius: 0.3rem;
  }
  article::before {
    content: '';
    position: absolute;
    top: -8px;
    bottom: -8px;
    left: -6px;
    right: -6px;
    border-top: 2px solid #000000;
    border-right: 2px solid #000000;
    border-bottom: 4px solid #000000;
    border-left: 2px solid #000000;
    border-radius: 0.5rem;
    z-index: -1;
  }
  article > * {
    padding-left: 0.85rem;
  }
  section.date {
    display: flex;
    gap: 10px;
    padding-top: 1rem;
  }
  section.date > div {
    display: flex;
    align-items: center;
    column-gap: 5px;
  }
  section.taxonomies {
    display: flex;
    flex-wrap: wrap;
    gap: 0.85rem;
    text-transform: capitalize;
  }
</style>
