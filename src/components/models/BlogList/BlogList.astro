---
import type { CollectionEntry } from 'astro:content';
import { FormattedDate } from '@/components/models/FormattedDate';
import { Taxonomy } from '@/components/models/Taxonomy';
import { Icon } from '@/components/ui/Icon';
import { getBlogCategory, getBlogTags } from '@/lib/collections/data';
import { getLocaleFromUrl, useTranslatedPath } from '@/utils/i18n/utils';

type Props = {
  entries: CollectionEntry<'blog'>[];
  taxonomies: {
    show: boolean;
    shouldDisplay?: ('category' | 'tags')[];
  };
};

const locale = getLocaleFromUrl(Astro.url);
const translatePath = useTranslatedPath(locale);
const { entries, taxonomies } = Astro.props;
---

<ul class="flex flex-col gap-7 py-5">
  {
    entries.map(async (entry) => {
      const {
        title,
        description,
        category: blogCategory,
        tags: blogTags,
        publishedAt,
        updatedAt,
      } = entry.data
      const category = await getBlogCategory(blogCategory)
      const tags = await getBlogTags(blogTags)

      return (
        <li class="animate-fadeInUp">
          <article class="double-border pt-4 pr-2 pb-2 pl-3.5 flex flex-col gap-2.5">
            <a
              class="font-extrabold text-xl xxs:text-[1.375rem] xxs:leading-7 xs:text-2xl xl:text-3xl hover:bg-default-mixed"
              href={translatePath(
                `/${entry.collection}/${entry.id.split('/').pop()}/`
              )}
            >
              {title}
            </a>
            <section class="text-xs xxs:text-[0.825rem] xxs:leading-4 xs:text-sm sm:text-base flex flex-wrap gap-y-1 gap-x-2.5 md:gap-x-5">
              <div class="flex items-center gap-1.5">
                <Icon iconName="publish" width={18} height={18} />
                <FormattedDate date={publishedAt} locale={locale} />
              </div>
              {updatedAt && (
                <div class="flex items-center gap-1.5">
                  <Icon iconName="update" width={18} height={18} />
                  <FormattedDate date={updatedAt} locale={locale} />
                </div>
              )}
            </section>
            <span class="text-sm xs:text-base">{description}</span>
            {taxonomies.show && (
              <section class="my-1.5 sm:my-2.5 flex flex-wrap items-center gap-y-4 sm:gap-y-5 gap-x-3">
                {taxonomies.shouldDisplay?.includes('category') && category && (
                  <Taxonomy
                    kind={blogCategory.metadata.collection}
                    taxonomy={category}
                  />
                )}
                {taxonomies.shouldDisplay?.includes('tags') &&
                  tags!.length !== 0 &&
                  tags!.map((tag) => (
                    <Taxonomy
                      kind={blogTags.metadata.collection}
                      taxonomy={tag}
                    />
                  ))}
              </section>
            )}
          </article>
        </li>
      )
    })
  }
</ul>
