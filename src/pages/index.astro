---
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout.astro'
import BulletinBoard from '@/components/BulletinBoard.astro'
import PhotoGallery from '@/components/PhotoGallery.astro'
import { getPhotos } from '@/lib/unsplash/getContent'
import { getPublishedSortedEntries } from '@/lib/content'
import { NEWS_MAXIMUM_COUNT } from '@/consts'
import { defaultLang } from '@/utils/i18n/data'

const meta = await getEntry('meta', `${defaultLang}/site-data`)
const newsList = getPublishedSortedEntries(await getCollection('news'))
const localeNewsList = newsList.filter(
  (news) => news.slug.slice(0, news.slug.indexOf('/')) === defaultLang
)
const photos = await getPhotos()
const latestNews = localeNewsList.slice(0, NEWS_MAXIMUM_COUNT)
---

<BaseLayout
  title={meta.data.site.title}
  description={meta.data.site.description}
  og={{ show: true }}
>
  <main data-pagefind-ignore="all">
    <BulletinBoard newsList={latestNews} />
    <PhotoGallery {photos} />
  </main>
</BaseLayout>
<style>
  main {
    display: flex;
    flex-direction: column;
    place-items: start;
    gap: 1.25rem;
  }
  @media (min-width: 1280px) {
    main {
      padding: 2.85rem 6.175rem 0 6.175rem;
      gap: 2.25rem;
    }
  }
</style>
<!-- <script>
  function init() {
    const elementsToBeAnimated = new Set([
      ...document.querySelectorAll('main > *:not(.bulletin-board > *)'),
    ])
    elementsToBeAnimated.forEach((elem) => elem.classList.add('fade-in'))

    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    } as IntersectionObserverInit

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('loaded')
          observer.unobserve(entry.target)
        }
      })
    }, observerOptions)

    elementsToBeAnimated.forEach((elem) => observer.observe(elem))
  }

  const eventsToBeAdded = ['DOMContentLoaded'] as const

  eventsToBeAdded.forEach((evName) => {
    document.addEventListener(evName, init)
  })
</script> -->
