---
import { getEntry } from 'astro:content'
// import Turnstile from './islands/Turnstile'
import { getLocaleFromUrl } from '@/utils/i18n/get-locale-from-url'
import { useTranslatedPath } from '@/utils/i18n/use-translated-path'
import { FORM_TEXTAREA_ROWS, FORM_TEXTAREA_MINLENGTH } from '@/consts'

const locale = getLocaleFromUrl(Astro.url)
const translatePath = useTranslatedPath(locale)
const t = await getEntry('i18n', `${locale}/translation`)
// const sitekey = Astro.locals.runtime.env.PUBLIC_TURNSTILE_SITE_KEY
---

<form
  id="contact-form"
  action={translatePath('/api/form')}
  method="post"
  novalidate
>
  <label for="name">{t.data.contact_form.name.label}</label>
  <div class="pokemon-border">
    <input type="text" id="name" name="name" autocomplete="off" required />
  </div>
  <div id="name-required" class="error hidden">
    {t.data.contact_form.name.required}
  </div>
  <label for="email">{t.data.contact_form.email.label}</label>
  <div class="pokemon-border">
    <input type="email" id="email" name="email" required />
  </div>
  <div id="email-required" class="error hidden">
    {t.data.contact_form.email.required}
  </div>
  <div id="email-invalid" class="error hidden">
    {t.data.contact_form.email.invalid}
  </div>
  <label for="message">{t.data.contact_form.message.label}</label>
  <div class="pokemon-border">
    <textarea
      id="message"
      name="message"
      rows={FORM_TEXTAREA_ROWS}
      minlength={FORM_TEXTAREA_MINLENGTH}
      autocomplete="off"
      required></textarea>
  </div>
  <div id="message-required" class="error hidden">
    {t.data.contact_form.message.required}
  </div>
  <div id="message-minlength" class="error hidden">
    {t.data.contact_form.message.minlength}
  </div>
  <section class="checkbox-area">
    <input type="checkbox" id="confirmation" name="confirmation" required />
    <label for="confirmation">{t.data.contact_form.confirmation.label}</label>
  </section>
  <div id="confirmation-required" class="error hidden">
    {t.data.contact_form.confirmation.required}
  </div>
  <!-- <Turnstile client:only="solid-js" siteKey={sitekey} locale={locale} /> -->
  <div
    class="cf-turnstile"
    data-sitekey={import.meta.env.PUBLIC_TURNSTILE_SITE_KEY}
    data-language={locale}
  >
  </div>
  <button id="submit-button" class="pokemon-border" type="submit"
    >{t.data.contact_form.sendLabel}</button
  >
</form>
<style>
  #contact-form {
    display: flex;
    flex-direction: column;
    gap: 0.875rem;
    label {
      user-select: none;
    }
    div {
      display: flex;
      flex-direction: column;
      input[type='text'],
      input[type='email'],
      textarea {
        padding: 0.5rem;
        background-color: var(--bg);
        outline: none;
      }
    }
    .checkbox-area {
      margin-top: 1.5rem;
      input[type='checkbox'] {
        align-self: flex-start;
      }
    }
    .cf-turnstile {
      margin: 0 auto;
    }
    button {
      min-width: 8rem;
      min-height: 2.75rem;
      font-weight: 600;
      margin-top: 1.25rem;
      padding: 0.25rem 1.85rem;
      align-self: center;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .error {
      color: var(--callout-failure-fg);
      background-color: var(--callout-failure-bg);
      padding: 0.5rem;
      border-radius: 0.25rem;
      &.hidden {
        display: none;
      }
    }
  }
</style>
<script>
  import { valid, submitting } from '../stores/contact-form-store'

  function init() {
    const script = document.createElement('script')
    script.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js'
    script.async = true
    script.defer = true
    document.body.appendChild(script)

    const formElement = document.getElementById(
      'contact-form'
    ) as HTMLFormElement

    const inputElements = formElement.getElementsByTagName('input')
    const textAreaElements = formElement.getElementsByTagName('textarea')
    const submitButton = document.getElementById(
      'submit-button'
    ) as HTMLButtonElement
    const fieldElements = [...inputElements, ...textAreaElements]

    submitting.listen((value) => {
      if (value) {
        const svgPaperPlane = document.createElementNS(
          'http://www.w3.org/2000/svg',
          'svg'
        )
        svgPaperPlane.setAttribute('viewBox', '0 0 24 24')
        svgPaperPlane.setAttribute('xmlns', 'http://www.w3.org/2000/svg')
        svgPaperPlane.setAttribute('width', '24')
        svgPaperPlane.setAttribute('height', '24')
        const path = document.createElementNS(
          'http://www.w3.org/2000/svg',
          'path'
        )
        path.setAttributeNS(null, 'fill', 'currentColor')
        path.setAttributeNS(null, 'd', 'M3 20v-6l8-2l-8-2V4l19 8z')
        svgPaperPlane.appendChild(path)
        submitButton.innerText = ''
        submitButton.appendChild(svgPaperPlane)
      }
    })

    fieldElements.forEach((elem) => {
      if (
        elem.tagName === 'INPUT' &&
        elem.getAttribute('type') === 'checkbox'
      ) {
        elem.addEventListener('change', () => {
          validate(elem)
        })
      } else {
        elem.addEventListener('blur', () => {
          validate(elem)
        })
      }
    })

    formElement.addEventListener('submit', (event) => {
      event.preventDefault()

      for (const elem of fieldElements) {
        validate(elem)
      }
      valid.set(formElement.checkValidity())

      valid.listen(async (value) => {
        if (value) {
          submitting.set(true)
          const formData = new FormData(formElement)
          const data = Object.fromEntries(formData)
          try {
            const response = await fetch(formElement.action, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            })

            if (response.ok && response.redirected) {
              window.location.replace(response.url)
            } else {
              formElement.reset()
              submitting.set(false)
              alert('Error submitting form. Please try again.')
              throw new Error(`Status code: ${response.status}`)
            }
          } catch (err) {
            if (err instanceof Error) {
              console.error(`Failed to submit form data: ${err.message}`)
            } else {
              console.trace(err)
            }
          } finally {
            submitting.set(false)
          }
        }
      })
    })

    const validate = (elem: HTMLInputElement | HTMLTextAreaElement) => {
      const elemName = elem.getAttribute('name')!
      const validityState = elem.validity
      const requiredError = document.getElementById(
        elemName + '-required'
      ) as HTMLDivElement

      switch (elemName) {
        case 'name':
          if (validityState.valueMissing) {
            requiredError.classList.remove('hidden')
          } else {
            requiredError.classList.add('hidden')
          }
          break
        case 'email': {
          const invalidError = document.getElementById(
            elemName + '-invalid'
          ) as HTMLDivElement
          if (validityState.valueMissing) {
            requiredError.classList.remove('hidden')
            invalidError.classList.add('hidden')
          } else if (validityState.typeMismatch) {
            requiredError.classList.add('hidden')
            invalidError.classList.remove('hidden')
          } else {
            requiredError.classList.add('hidden')
            invalidError.classList.add('hidden')
          }
          break
        }
        case 'message': {
          const minlengthError = document.getElementById(
            elemName + '-minlength'
          ) as HTMLDivElement
          if (validityState.valueMissing) {
            requiredError.classList.remove('hidden')
            minlengthError.classList.add('hidden')
          } else if (validityState.tooShort) {
            requiredError.classList.add('hidden')
            minlengthError.classList.remove('hidden')
          } else {
            requiredError.classList.add('hidden')
            minlengthError.classList.add('hidden')
          }
          break
        }
        case 'confirmation':
          if (validityState.valueMissing) {
            requiredError.classList.remove('hidden')
          } else {
            requiredError.classList.add('hidden')
          }
          break
        default:
          break
      }
    }
  }

  const eventsToBeAdded = ['DOMContentLoaded'] as const

  eventsToBeAdded.forEach((evName) => {
    document.addEventListener(evName, init)
  })
</script>
