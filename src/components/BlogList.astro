---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate.astro'
import { Icon } from '@/components/Icon'
import { Taxonomy } from '@/components/Taxonomy'
import { getLocaleFromUrl } from '@/utils/i18n/get-locale-from-url'
import { useTranslatedPath } from '@/utils/i18n/use-translated-path'
import { getCategory, getBlogTags } from '@/lib/collections/data'

type Props = {
  entries: CollectionEntry<'blog'>[]
  kind: 'blog' | 'taxonomy'
}

const locale = getLocaleFromUrl(Astro.url)
const translatePath = useTranslatedPath(locale)
const { entries, kind } = Astro.props
---

<ul class="entry-list">
  {
    entries.map(async (entry) => {
      const {
        title,
        description,
        category: blogCategory,
        tags: blogTags,
        publishedAt,
        modifiedAt,
      } = entry.data
      const category = await getCategory(blogCategory.id)
      const tags = await getBlogTags(blogTags, locale)

      return (
        <li>
          <article class="pokemon-border">
            <section class="date">
              <div>
                <Icon iconName="publish" width={20} height={20} />
                <FormattedDate date={publishedAt} locale={locale} />
              </div>
              {modifiedAt && (
                <div>
                  <Icon iconName="update" width={20} height={20} />
                  <FormattedDate date={modifiedAt} locale={locale} />
                </div>
              )}
            </section>
            <a
              class="blog-title"
              href={translatePath(
                `/${entry.collection}/${entry.slug.split('/').pop()}`
              )}
            >
              {title}
            </a>
            <span class="blog-description">{description}</span>
            {kind === 'blog' && (
              <section class="taxonomies">
                <Taxonomy taxonomy={category} />
                {tags && (
                  <ul class="tag-list">
                    {tags.map((tag) => (
                      <li>
                        <Taxonomy taxonomy={tag} />
                      </li>
                    ))}
                  </ul>
                )}
              </section>
            )}
          </article>
        </li>
      )
    })
  }
</ul>
<style>
  .entry-list {
    display: grid;
    gap: 1.75rem;
    padding: 1.125rem 0;
    article {
      padding: 1rem 0.5rem 0.85rem 0.85rem;
      display: grid;
      gap: 0.975rem;
      .blog-title {
        color: var(--fg);
        font-size: 1.585rem;
        font-weight: 700;
        line-height: 1.215;
        text-decoration: none;
        &:hover {
          text-decoration: underline;
          text-underline-offset: 6px;
        }
        @media (min-width: 768px) {
          font-size: 1.85rem;
        }
      }
      .date,
      .blog-description,
      .taxonomies {
        font-size: 1.15rem;
      }
      .date {
        display: flex;
        gap: 0.85rem;
        div {
          display: flex;
          align-items: center;
          gap: 0.35rem;
        }
      }
      .taxonomies {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        column-gap: 0.95rem;
        row-gap: 1.25rem;
        a {
          color: var(--accent);
          text-decoration: none;
          &:hover {
            color: var(--accent-dark);
          }
        }
        .tag-list {
          display: flex;
          flex-wrap: wrap;
          column-gap: 0.5rem;
          row-gap: 0.85rem;
          padding: 0;
          li {
            list-style: none;
          }
        }
      }
    }
  }
</style>
