---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate.astro'
import Svg from '@/components/Svg/index.astro'
import { getLocaleFromUrl } from '@/i18n/utils'

type Props = {
  entries: CollectionEntry<'blog'>[]
  kind: 'blog' | 'taxonomy'
}

const locale = getLocaleFromUrl(Astro.url)
const { entries, kind } = Astro.props
---

<ul class="entry-list">
  {
    entries.map((entry) => (
      <li>
        <article>
          <section class="date">
            <div>
              <Svg iconName="upload" width={20} height={20} />
              <FormattedDate date={entry.data.publishedAt} />
            </div>
            {entry.data.modifiedAt && (
              <div>
                <Svg iconName="update" width={20} height={20} />
                <FormattedDate date={entry.data.modifiedAt} />
              </div>
            )}
          </section>
          <a
            class="blog-title"
            href={`/${locale}/${entry.collection}/${entry.slug.split('/').pop()}/`}
          >
            {entry.data.title}
          </a>
          <span>{entry.data.description}</span>
          {kind === 'blog' && (
            <section class="taxonomies">
              <a href={`/${locale}/blog/categories/${entry.data.category}/`}>
                {entry.data.category}
              </a>
              <ul class="tag-list">
                {entry.data.tags?.map((tag) => (
                  <li>
                    <a href={`/${locale}/blog/tags/${tag}/`}>#{tag}</a>
                  </li>
                ))}
              </ul>
            </section>
          )}
        </article>
      </li>
    ))
  }
</ul>
<style>
  a.blog-title {
    color: var(--black);
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1.1;
    text-decoration: none;
    &:hover {
      text-decoration: underline;
      text-underline-offset: 7px;
    }
  }
  @media (min-width: 768px) {
    a.blog-title {
      font-size: 1.85rem;
    }
  }
  ul.entry-list {
    display: grid;
    gap: 1.75rem;
    padding: 0;
    article {
      position: relative;
      padding-left: 0.85rem;
      border-top: 4px solid var(--black);
      border-right: 2px solid var(--black);
      border-bottom: 2px solid var(--black);
      border-left: 2px solid var(--black);
      border-radius: 0.3rem;
      display: grid;
      gap: 0.75rem;
      &::before {
        content: '';
        position: absolute;
        top: -8px;
        bottom: -8px;
        left: -6px;
        right: -6px;
        border-top: 2px solid var(--black);
        border-right: 2px solid var(--black);
        border-bottom: 4px solid var(--black);
        border-left: 2px solid var(--black);
        border-radius: 0.5rem;
        z-index: -1;
      }
    }
    section.date {
      display: flex;
      gap: 10px;
      padding-top: 1rem;
    }
    section.date > div {
      display: flex;
      align-items: center;
      column-gap: 5px;
    }
    li {
      list-style: none;
    }
    section.taxonomies {
      display: flex;
      flex-wrap: wrap;
      gap: 0.85rem;
      text-transform: capitalize;
      & a {
        color: var(--accent);
        text-decoration: none;
        &:hover {
          color: var(--accent-dark);
        }
      }
    }
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.4rem;
      padding: 0;
      li {
        list-style: none;
      }
    }
  }
</style>
