---
import { getEntry } from 'astro:content';
import { CardGrid } from '@/components/elements/Card';
import {
  ACCOUNT_ID,
  // DEFAULT_PHOTO_COUNT,
  UNSPLASH_BASE_URL,
} from '@/lib/consts';
import { isDev } from '@/lib/mode';
// import { getPhotographer } from '@/lib/unsplash/contents';
// import { getPhotos } from '@/lib/unsplash/contents';
import { getLocaleFromUrl } from '@/utils/i18n/utils';
// import { createApi } from 'unsplash-js';
import PhotoItem from './PhotoItem.astro';
import PhotoSkelton from './PhotoSkelton.astro';
// import wretch from 'wretch';
import type { UnsplashPhotoData } from '@/lib/unsplash/types';

const locale = getLocaleFromUrl(Astro.url);
const t = await getEntry('i18n', `${locale}/translation`);
const accessKey = isDev
  ? import.meta.env.UNSPLASH_API_ACCESS_KEY
  : process.env.UNSPLASH_API_ACCESS_KEY!;
// const unsplashApiClient = createApi({ accessKey });

const getPhotos = async () => {
  const res = await fetch("https://api.unsplash.com/search/photos?page=1&per_page=15&query=flowers", { headers: {'Authorization': `Client-ID ${accessKey}`}});

  if (!res.ok) {
    console.error(res.status);
    console.error(res.statusText);
    throw new Error(
      `Error occurred when trying to get photos..: ${res.statusText}`,
    );
  }

  const data = await res.json() as UnsplashPhotoData;

  return data;
};

const getPhotographer = async () => {
  const res = await fetch(`https://api.unsplash.com/users/${ACCOUNT_ID}`, { headers: {'Authorization': `Client-ID ${accessKey}`}})

  if (!res.ok) {
    console.error(res.status);
    console.error(res.statusText);
    throw new Error(
      "Error occurred when trying to get my user data..",
    );
  }

  const data = await res.json();

  return data;
};

const photos = await getPhotos() as UnsplashPhotoData;
const username = await getPhotographer();
---

<div class="flex flex-col gap-6 py-5 px-1">
  <CardGrid>
    {
      photos && photos.results.map((photo, i) => (
        <PhotoItem server:defer {photo} order={i + 1}>
          <PhotoSkelton slot="fallback" />
        </PhotoItem>
      ))
    }
  </CardGrid>
  <aside>
    <p class="text-sm md:text-base">
      {t!.data.photo_gallery.credit_label}
      <cite>
        <a
          href={`${UNSPLASH_BASE_URL}/@${ACCOUNT_ID}`}
          class="text-primary hover:text-primary-dim"
        >
          {username.name}
        </a>
      </cite>
      /
      <cite>
        <a href={UNSPLASH_BASE_URL} class="text-primary hover:text-primary-dim">
          Unsplash
        </a>
      </cite>
    </p>
  </aside>
</div>
