---
import { Icon } from '@/components/Icon'
import { generateUniqueId } from '@/utils/generate-unique-id'
import { toBoolean } from '@/utils/to-boolean'
import { getCallout } from './callouts'
import type { Props as CalloutProps } from './Callout.astro'
import {
  calloutTitle as titleStyle,
  calloutToggleCheck,
  calloutTitleText,
  calloutTitleIcon,
} from './callout.css'

type Props = CalloutProps

const {
  'data-callout-type': dataCalloutType,
  'data-expanded': dataExpanded,
  'data-expandable': dataExpandable,
} = Astro.props
const uniqueId = generateUniqueId()
const isExpandable = toBoolean(dataExpandable)
const isExpanded = toBoolean(dataExpanded)
const callout = getCallout(dataCalloutType)
const calloutTitle: string | undefined = await Astro.slots.render('default')
---

{
  isExpandable ? (
    <>
      <input
        type="checkbox"
        class={calloutToggleCheck}
        id={`callout-toggle-check-${dataCalloutType}-${uniqueId}`}
        checked={isExpanded === true ?? false}
      />
      <label
        for={`callout-toggle-check-${dataCalloutType}-${uniqueId}`}
        class={titleStyle}
      >
        <Icon
          class={calloutTitleIcon}
          iconName={callout.icon}
          width={20}
          height={20}
        />
        <span class={calloutTitleText}>
          {calloutTitle ? <Fragment set:html={calloutTitle} /> : callout.label}
        </span>
      </label>
    </>
  ) : (
    <div class={titleStyle}>
      <Icon
        class={calloutTitleIcon}
        iconName={callout.icon}
        width={20}
        height={20}
      />
      <span class={calloutTitleText}>
        {calloutTitle ? <Fragment set:html={calloutTitle} /> : callout.label}
      </span>
    </div>
  )
}
