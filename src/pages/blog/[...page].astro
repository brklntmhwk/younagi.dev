---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro'
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout.astro'
import Pager from '@/components/Pager.astro'
import Svg from '@/components/Svg/index.astro'
import Search from '@/components/Search.astro'
import { LIMIT_PER_PAGE } from '@/lib/consts'

export const getStaticPaths = (async ({ paginate }) => {
  const entries = (await getCollection('blog')).sort(
    (a, b) => a.data.publishedAt.valueOf() - b.data.publishedAt.valueOf()
  )

  return paginate(entries, { pageSize: LIMIT_PER_PAGE })
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const meta = await getEntry('meta', 'site-data')
const { page } = Astro.props
---

<BaseLayout
  title={meta.data.blog.title}
  description={meta.data.blog.description}
>
  <main>
    <section>
      <h1>Blog</h1>
      <Search />
      {
        page.data.length === 0 ? (
          <p>Woops! No entry found..</p>
        ) : (
          <>
            <ul class="entry-list">
              {page.data.map((entry) => (
                <li>
                  <article>
                    <section class="date">
                      <div>
                        <Svg iconName="publish" width={20} height={20} />
                        <time datetime={entry.data.publishedAt.toISOString()}>
                          {new Intl.DateTimeFormat('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                          }).format(entry.data.publishedAt)}
                        </time>
                      </div>
                      {entry.data.modifiedAt && (
                        <div>
                          <Svg iconName="update" width={20} height={20} />
                          <time datetime={entry.data.modifiedAt.toISOString()}>
                            {new Intl.DateTimeFormat('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric',
                            }).format(entry.data.modifiedAt)}
                          </time>
                        </div>
                      )}
                    </section>
                    <a class="blog-title" href={`/blog/${entry.slug}`}>
                      {entry.data.title}
                    </a>
                    <span>{entry.data.description}</span>
                    <ul class="tag-list">
                      {entry.data.tags?.map((tag) => (
                        <li>
                          <a href="/">#{tag}</a>
                        </li>
                      ))}
                    </ul>
                  </article>
                </li>
              ))}
            </ul>
          </>
        )
      }
    </section>
    <Pager page={page} />
  </main>
</BaseLayout>
<style>
  main {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  a.blog-title {
    font-size: 2rem;
    font-weight: bolder;
    text-decoration: none;
    &:hover {
      text-decoration: underline;
      text-underline-offset: 7px;
    }
  }
  ul.entry-list {
    display: grid;
    row-gap: 1.25rem;
    padding: 0;
  }
  ul.entry-list > li {
    list-style: none;
    /* border: 1px solid black; */
  }
  ul.entry-list article {
    display: grid;
    row-gap: 5px;
  }
  ul.tag-list {
    display: flex;
    flex-wrap: wrap;
    column-gap: 10px;
    padding: 0;
  }
  ul.tag-list > li {
    list-style: none;
  }
  section.date {
    display: flex;
    column-gap: 10px;
  }
  section.date > div {
    display: flex;
    align-items: center;
    column-gap: 5px;
  }
</style>
