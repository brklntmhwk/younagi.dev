---
import { getEntry } from 'astro:content'
import { defaultLang, languages } from '@/utils/i18n/data'
import Modal from '@/components/Modal.astro'
import { getLocaleFromUrl } from '@/utils/i18n/getLocaleFromUrl'
import { getTargetLocaleSlug } from '@/utils/i18n/getTargetLocalSlug'

const curUrl = Astro.url
const curLocale = getLocaleFromUrl(curUrl)
const t = await getEntry('i18n', `${curLocale}/translation`)
---

<Modal
  modalName="lang"
  iconName="language"
  buttonLabel={t.data.locale_picker.button_label}
>
  <ul class="lang-list">
    {
      Object.entries(languages).map(([lang, label]) => (
        <li>
          {lang === curLocale ? (
            <span>{label}</span>
          ) : (
            <a
              href={
                lang === defaultLang
                  ? `/${getTargetLocaleSlug(curLocale, curUrl)}`
                  : `/${lang}/${getTargetLocaleSlug(curLocale, curUrl)}`
              }
            >
              {label}
            </a>
          )}
        </li>
      ))
    }
  </ul>
</Modal>
<style>
  ul.lang-list {
    display: grid;
    gap: 1.5rem;
    margin-left: 1.25rem;
    li {
      span {
        font-weight: 700;
      }
      a {
        color: var(--fg);
        font-size: 1.15rem;
        text-decoration: none;
        position: relative;
        border-bottom: 2px solid transparent;
        &:hover::before {
          font-family: var(--base-font);
          content: 'â–¶';
          position: absolute;
          top: -0.275rem;
          left: -1.5rem;
          font-size: 1.25rem;
          align-self: center;
        }
      }
    }
  }
</style>
<script>
  function init() {
    const listenToModalEvents = (
      modalButton: HTMLButtonElement,
      modal: HTMLDivElement
    ) => {
      modalButton.addEventListener('click', () => {
        modal.classList.toggle('hidden')
      })

      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.toggle('hidden')
        }
      })

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          modal.classList.add('hidden')
        }
        if (e.code === 'KeyL' && e.ctrlKey && e.shiftKey) {
          e.preventDefault()
          modal.classList.toggle('hidden')
        }
      })
    }

    const modalButton = document.getElementById(
      'lang-icon-button'
    ) as HTMLButtonElement | null
    const modal = document.getElementById('lang-modal') as HTMLDivElement | null

    if (modalButton && modal) {
      listenToModalEvents(modalButton, modal)
    }
  }

  const eventsToBeAdded = ['DOMContentLoaded'] as const

  eventsToBeAdded.forEach((evName) => {
    document.addEventListener(evName, init)
  })
</script>
