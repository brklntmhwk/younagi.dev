---
import { Icon } from '@/components/ui/Icon';
import { generateUniqueId } from '@/utils/generate-unique-id';
import { toBoolean } from '@/utils/to-boolean';
import type { Props as CalloutProps } from './Callout.astro';
import { getCallout } from './callouts';

type Props = CalloutProps;

const {
  'data-callout-type': dataCalloutType,
  'data-expanded': dataExpanded,
  'data-expandable': dataExpandable,
} = Astro.props;
const uniqueId = generateUniqueId();
const isExpandable = toBoolean(dataExpandable);
const isExpanded = toBoolean(dataExpanded);
const callout = getCallout(dataCalloutType);
const calloutTitle: string | undefined = await Astro.slots.render('default');
---

{
  isExpandable ? (
    <>
      <input
        type="checkbox"
        class="peer appearance-none"
        id={`callout-toggle-check-${dataCalloutType}-${uniqueId}`}
        checked={isExpanded}
      />
      <label
        for={`callout-toggle-check-${dataCalloutType}-${uniqueId}`}
        class="flex items-center gap-2.5 select-none after:content-['>'] after:text-inherit after:inline-block after:text-xl peer-checked:after:rotate-90 after:ease-linear after:duration-300"
      >
        <Icon
          class="basis-8 sm:basis-5"
          iconName={callout.icon}
          width={20}
          height={20}
        />
        <span class="text-base font-bold">
          {calloutTitle ? <Fragment set:html={calloutTitle} /> : callout.label}
        </span>
      </label>
    </>
  ) : (
    <div class="flex items-center gap-2.5 select-none">
      <Icon
        class="basis-8 sm:basis-5"
        iconName={callout.icon}
        width={20}
        height={20}
      />
      <span class="text-base font-bold">
        {calloutTitle ? <Fragment set:html={calloutTitle} /> : callout.label}
      </span>
    </div>
  )
}
