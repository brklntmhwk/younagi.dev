---
import { Picture } from 'astro:assets';
// import { findImage } from '@/lib/images';
// import { encode } from "blurhash";
// import { getPixels } from "@unpic/pixels";
import type { HTMLAttributes } from 'astro/types';

type Props = Omit<HTMLAttributes<'picture'>, 'alt' | 'src'> & {
  alt: string;
  placeholder?: string;
  src: string | ImageMetadata;
};

const { alt, placeholder, src, ...props } = Astro.props;

// Generate a placeholder for and optimize the image if the placeholder is "undefined" here. (This is the case whenever the image comes from outside the scope of the remark processor)
// let blurHash: string | undefined = undefined;

// if (placeholder === undefined) {
//   const _image = await findImage(src);

//   if (typeof _image === 'string' && _image.startsWith('http') && typeof src === 'string') {
//     const imgData = await getPixels(src);
//     const data = Uint8ClampedArray.from(imgData.data);
//     blurHash = encode(data, imgData.width, imgData.height, 4, 4);
//   }
// } else {
//   blurHash = placeholder;
// }
---

{
  typeof src === 'string' ? (
    <img {alt} {src} class="image" {...props} />
  ) : (
    <figure>
      <Picture
        {alt}
        {src}
        class="image"
        formats={['avif']}
        widths={[240, 540, 720, src.width]}
        pictureAttributes={{
          style: {
            aspectRatio: `${src.width} / ${src.height}`,
            margin: "0 auto",
            maxHeight: "100%"
          }
        }}
        {...props}
      />
      <figcaption>{alt}</figcaption>
    </figure>
  )
}
<style define:vars={{ blurUrl: `url(${placeholder})` }}>
  figure {
    display: flex;
    flex-direction: column;
    gap: 0.375rem;
    place-items: center;
    margin: 1.75rem 0;
  }
  figcaption {
    font-size: 0.95rem;
  }
  .image {
    object-fit: contain;
    color: transparent;
    background-image: var(--blurUrl);
    background-size: cover;
    background-position: 50% 50%;
    background-repeat: no-repeat;
  }
</style>
