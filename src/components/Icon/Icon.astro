---
import type { HTMLAttributes } from 'astro/types'
import { getEntry } from 'astro:content'
import { parse } from 'node-html-parser'
import { getLocaleFromUrl } from '@/utils/i18n/get-locale-from-url'
import type { IconName } from './types'

type Props = {
  iconName: IconName
} & HTMLAttributes<'svg'>

const iconGetter = (iconName: IconName) => {
  const filepath = `./icons/${iconName}.svg`
  const files = import.meta.glob<string>('./icons/**/*.svg', {
    query: '?raw',
    import: 'default',
    eager: true,
  })

  if (!(filepath in files)) {
    throw new Error(`${filepath} ${t.data.svg.not_found_message}`)
  }
  const root = parse(files[filepath]!)
  const svg = root.querySelector('svg')
  if (!svg) {
    throw new Error(t.data.svg.invalid_error_message)
  }
  const { attributes, innerHTML } = svg

  return {
    attributes,
    innerHTML,
  }
}

const { iconName, ...attributes } = Astro.props
const { attributes: baseAttributes, innerHTML } = iconGetter(iconName)
const svgAttributes = { ...baseAttributes, ...attributes }
const locale = getLocaleFromUrl(Astro.url)
const t = await getEntry('i18n', `${locale}/translation`)
---

<svg {...svgAttributes} set:html={innerHTML} />
